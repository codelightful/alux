{"version":3,"file":"alux.min.js","sources":["../src/cookies.mjs","../src/logger.mjs","../src/events.mjs","../src/http.mjs","../src/util.mjs","../src/errorHandler.mjs","../src/fragment.mjs","../src/alux.mjs"],"sourcesContent":["const $module = {};\r\n\r\nfunction trim(text) {\r\n    return text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n}\r\n\r\n/**\r\n * Sets a specific cookie\r\n * @param name Name of the cookie to set\r\n * @param value Value to set\r\n * @param timespan Timspan to maintain the cookie in seconds\r\n */\r\n$module.set = function(name, value, timespan) {\r\n    if(typeof(name) !== 'string') {\r\n        throw new Error('alux.cookies.set.invalid_name');\r\n    } else if (typeof (timespan) !== 'number') {\r\n        throw new Error('alux.cookies.set.invalid_timespan');\r\n    }\r\n    const expireDate = new Date();\r\n    expireDate.setTime(expireDate.getTime() + (timespan * 1000));\r\n    var cookie = trim(name) + '=' + value + '; expires=' + expireDate.toGMTString() + '; path=/';\r\n    document.cookie = cookie;\r\n};\r\n\r\n/**\r\n * Obtains the value from a cookie\r\n * @param name Name of the cookie to obtain\r\n * @returns Cookie value or null if it is not defined\r\n */\r\n$module.get = function(name) {\r\n    if(typeof(name) !== 'string') {\r\n        throw new Error('alux.cookies.get.invalid_name');\r\n    }\r\n    const cookieArray = document.cookie.split(';');\r\n    var cookieValue = null;\r\n    for(var idx=0; idx < cookieArray.length; idx++) {\r\n        const rawCookie = trim(cookieArray[idx]);\r\n        if(!rawCookie) {\r\n            continue;\r\n        }\r\n        const cookieParts = rawCookie.split('=');\r\n        if(trim(cookieParts[0]) !== name) {\r\n            continue;\r\n        }\r\n        return cookieParts[1];\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default $module;","/*\r\nAlux Logger Module\r\nv1.0.0\r\n*/\r\nconst $module = {};\r\nconst $scope = {};\r\n\r\n// contains all the loggers registered\r\n$scope.loggers = {};\r\n// dictionary with all the defined log levels\r\n$scope.levels = {\r\n    fatal: { value: 10, color: '#ff4444', label: 'FATAL' },\r\n    error: { value: 20, color: '#ff4444', label: 'ERROR' },\r\n    warn: { value: 30, color: '#ff8800', label: 'WARNING' },\r\n    info: { value: 40, color: '#0099cc', label: 'INFO' },\r\n    debug: { value: 50, color: '#3E4551', label: 'DEBUG' },\r\n    trace: { value: 60, color: '#3E4551', label: 'TRACE' }\r\n};\r\n\r\nimport cookies from './cookies.mjs';\r\nvar levelCookie = cookies.get('alux.logger.level');\r\nif(!levelCookie) {\r\n    $scope.globalLevel = $scope.levels.warn;\r\n} else {\r\n    $scope.globalLevel = $scope.levels[levelCookie];\r\n    if(!$scope.globalLevel) {\r\n        $scope.globalLevel = $scope.levels.warn;\r\n    }\r\n}\r\n\r\n/**\r\n * Internal log implementation\r\n * @param logName Name of the logger to print\r\n * @param currentLevel Log level defined for the logger\r\n * @param level Level of the log message to print\r\n * @param message Message to print\r\n * @param details Details to add\r\n */\r\nfunction log(logName, currentLevel, level, message, ...details) {\r\n    if(currentLevel.value >= level.value) {\r\n        console.log('%c[' + level.label + '][' + logName + ']: ' + message, ...['color: ' + level.color, ...details]);\r\n    }\r\n};\r\n\r\n/** Represents a specific logger */\r\nclass Logger {\r\n    // holds the name or identigier of the current logger\r\n    #name;\r\n    // log level defined for the logger instance\r\n    #level;\r\n\r\n    constructor(name) {\r\n        this.#name = name;\r\n        var levelCookie = cookies.get('alux.logger.[' + name + '].level');\r\n        if(!levelCookie) {\r\n            this.#level = $scope.globalLevel;\r\n        } else {\r\n            this.#level = $scope.levels[levelCookie];\r\n            if(!this.#level) {\r\n                this.#level = $scope.globalLevel;\r\n            }       \r\n        }\r\n    }\r\n\r\n    /** Obtains or sets the log level defined for the logger instance */\r\n    level() {\r\n        if(arguments.length !== 0) {\r\n            var levelInfo = $scope.levels[arguments[0]];\r\n            if(!levelInfo) {\r\n                throw new Error('alux.logger.invalid_level[' + arguments[0] + ']');\r\n            }\r\n            this.#level = levelInfo;\r\n            cookies.set('alux.logger.[' + this.#name + '].level', arguments[0], 1800);\r\n        }\r\n        return this.#level.label;\r\n    }\r\n\r\n    /**\r\n     * Prints a FATAL log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    fatal(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.fatal, message, ...details);\r\n    }\r\n\r\n    /**\r\n     * Prints an ERROR log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    error(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.error, message, ...details);\r\n    }\r\n\r\n    /**\r\n     * Prints a WARNING log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    warn(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.warn, message, ...details);\r\n    }\r\n\r\n    /**\r\n     * Prints an INFO log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    info(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.info, message, ...details);\r\n    }\r\n\r\n    /**\r\n     * Prints a DEBUG log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    debug(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.debug, message, ...details);\r\n    }\r\n\r\n    /**\r\n     * Prints a TRACE log message\r\n     * @param message Message to print\r\n     * @param details Objects to add as details to the logger\r\n     */\r\n    trace(message, ...details) {\r\n        log(this.#name, this.#level, $scope.levels.trace, message, ...details);\r\n    }\r\n}\r\n\r\n/**\r\n * Obtains the instance of a specific logger or creates a new one if that does not exist\r\n * @param name Logger name or identifier\r\n * @returns Logger instance\r\n */\r\n$module.getLogger = function(name) {\r\n    if(!$scope.loggers[name]) {\r\n        $scope.loggers[name] = new Logger(name);\r\n    }\r\n    return $scope.loggers[name];\r\n};\r\n\r\n/** Gets or sets the default level defined for the loggers */\r\n$module.level = function() {\r\n    if(arguments.length === 1) {\r\n        const levelInfo = $scope.levels[arguments[0]];\r\n        if(!levelInfo) {\r\n            throw new Error('alux.logger.invalid_level[' + arguments[0] + ']');\r\n        }\r\n        $scope.globalLevel = levelInfo;\r\n        cookies.set('alux.logger.level', arguments[0], 1800);\r\n        for(var logName in $scope.loggers) {\r\n            var logger = $scope.loggers[logName];\r\n            logger.level(arguments[0]);\r\n        }\r\n    } else if(arguments.length === 2) {\r\n        const logger = $module.getLogger(arguments[0]);\r\n        logger.level(arguments[1]);\r\n        return logger.level();\r\n    }\r\n    return $scope.globalLevel?.label;\r\n};\r\n\r\nexport default $module;","const $module = {};\r\nconst $scope = {};\r\n// placeholders to maintain references to event listeners and callbacks\r\n$scope.events = {};\r\n// contains all the callbacks registered to be executed once the ready status is reached\r\n$scope.events.ready = {\r\n    completed: false,\r\n    listeners: []\r\n};\r\n\r\n$module.on = function(eventName, callback) {\r\n    const eventHolder = $scope.events[eventName];\r\n    if(!eventHolder) {\r\n        throw new Error('alux.events.unknown_event[' + eventName + ']');\r\n    } else if(typeof(callback) !== 'function') {\r\n        throw new Error('alux.events.invalid_callback');\r\n    } else if(eventHolder.completed) {\r\n        callback();\r\n    } else {\r\n        eventHolder.listeners.push(callback);\r\n    }\r\n    return $module;\r\n};\r\n\r\n(function checkReadyState() {\r\n    const onDocumentReady = () => {\r\n        $scope.events.ready.completed = true;\r\n        if($scope.events.ready.listeners.length > 0) {\r\n            $scope.events.ready.listeners.map((handler) => {\r\n                handler();\r\n            })\r\n        }\r\n    };\r\n    if (document.readyState === \"complete\") {\r\n        onDocumentReady();\r\n    } else if (typeof(document.addEventListener) === 'function') {\r\n        document.addEventListener('DOMContentLoaded', onDocumentReady, false);\r\n    } else if (typeof(document.attachEvent)  === 'function') {\r\n        document.attachEvent(\"onreadystatechange\", function () {\r\n\t\t\tif (document.readyState === \"complete\") {\r\n\t\t\t\tonDocumentReady();\r\n\t\t\t}\r\n\t\t});\r\n    }\r\n})();\r\n\r\nexport default $module;","const $module = {};\r\n\r\n/** Creates the underlying XMLHTTP object used to execute ajax calls */\r\nfunction createXmlHttp() {\r\n\tif (window.XMLHttpRequest) {\r\n\t\treturn new XMLHttpRequest();\r\n\t} else {\r\n\t\ttry {\r\n\t\t\treturn new ActiveXObject('Msxml2.XMLHTTP');\r\n\t\t} catch (e) {\r\n\t\t\ttry {\r\n\t\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\r\n\t\t\t} catch (ex) {\r\n\t\t\t\tlogger.error('alux.http.xmlhttp_creation_error', ex);\r\n\t\t\t\tthrow Error('alux.http.xmlhttp_creation_error');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Create a request object to execute ajax calls in a crossbrowser approach */\r\nfunction createRequest(resolve, reject) {\r\n\tconst request = createXmlHttp();\r\n\trequest.onreadystatechange = function () {\r\n\t\tif (request.readyState == 4 || request.readyState === 'complete') {\r\n\t\t\tif (request.status == 200) {\r\n\t\t\t\tresolve(request.responseText);\r\n\t\t\t} else {\r\n\t\t\t\t// TODO: creaate a way to identify http errors\r\n\t\t\t\treject({ type: 'http', code: request.status, message: request.status + ' (' + request.statusText + ')' });\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn request;\r\n}\r\n\r\n$module.request = function(url, options) {\r\n    if(typeof(url) !== 'string' || !url) {\r\n        throw new Error('alux.http.null_url');\r\n    }\r\n    if(!options) {\r\n        options = {};\r\n    }\r\n    if(!options.method) {\r\n        options.method = 'GET';\r\n    }\r\n    return new Promise(function(resolve, reject) {\r\n        const request = createRequest(resolve, reject);\r\n        request.open(options.method, url, options.async !== false);\r\n        if(options.method === 'GET' || !options.data) {\r\n            request.send();\r\n        } else {\r\n            request.send(options.data);\r\n        }\r\n        \r\n    });\r\n};\r\n\r\nexport default $module;","const $module = {};\r\n\r\n$module.random = {};\r\n\r\n/** Creates a random tiny identified composed by 4 alphanumeric characters */\r\n$module.random.tinyId = function() {\r\n\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n};\r\n\r\n/** Creates a random short identified composed by 8 alphanumeric characters */\r\n$module.random.shortId = function() {\r\n\treturn $module.random.tinyId() + $module.random.tinyId();\r\n};\r\n\r\n/** Creates a random values simulating a global global unique identifier */\r\n$module.random.guid = function () {\r\n\treturn $module.random.shortId()\r\n\t\t+ '-' + $module.random.shortId()\r\n\t\t+ '-' + $module.random.shortId()\r\n\t\t+ '-' + $module.random.shortId()\r\n\t\t+ $module.random.shortId();\r\n};\r\n\r\nexport default $module;","const $module = {};\r\nimport logger from './logger.mjs';\r\nimport util from './util.mjs';\r\n\r\n/** Wrapper that allows to control the action around an error */\r\nclass ErrorHandler {\r\n    #module;\r\n    #rootCause;\r\n    #code;\r\n    #guid;\r\n    constructor(specs) {\r\n        this.#guid = util.random.guid();\r\n        this.#rootCause = specs.cause;\r\n        this.#module = specs.module;\r\n        this.#code = specs.code ?? 'alux.error_handler';\r\n    }\r\n\r\n    /** Allows to obtain the unique value that identify this error occurrence */\r\n    get guid() {\r\n        return this.#guid;\r\n    }\r\n\r\n    /** Creates an error entry with the details about the error */\r\n    log() {\r\n        const log = logger.getLogger(this.#module);\r\n        if(typeof(this.#rootCause) === 'string') {\r\n            log.error('[' + this.#guid + '] ' + this.#code + ':' + this.#rootCause);\r\n        } else if(this.#rootCause) {\r\n            log.error('[' + this.#guid + '] ' + this.#code, this.#rootCause);\r\n        } else {\r\n            log.error('[' + this.#guid + '] ' + this.#code);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a visual hint to inform the user about the error\r\n     * @param selector String with the selector to render the error on it or reference to a DOM element\r\n     */\r\n    render(selector) {\r\n        var target = null;\r\n        if(!selector || selector === 'body') {\r\n            target = document.body;\r\n        } else if(typeof(selector) === 'string') {\r\n            target = document.querySelector(selector);\r\n        } else if(typeof(selector) === 'object') {\r\n            target = selector;\r\n        }\r\n        this.log();\r\n        if(target) {\r\n            target.innerHTML = '<div class=\"badge badge-error\">\\\r\n                <div class=\"header\">Atention!</div>\\\r\n                <div class=\"content\">An error has occurred</div>\\\r\n                <div class=\"details\">' + this.#guid + '</div>\\\r\n            </div>';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an object to wrap an error and allow to take actions with it\r\n * @param specs Object with the specifications to create the error handler.  The values are:\r\n *      - module: String with the name of the module that produces the error\r\n *      - cause: Reference to the root cause that creates the error condition\r\n *      - code: Optional string with the error code\r\n * @returns Error hanlder instance\r\n */\r\n$module.create = function(specs) {\r\n    return new ErrorHandler(specs);\r\n};\r\n\r\nexport default $module;","const $moduleName = 'fragment';\r\nconst $scope = {};\r\n$scope.fragments = {};\r\n\r\nimport http from './http.mjs';\r\nimport logger from './logger.mjs';\r\nimport errorHandler from './errorHandler.mjs'; \r\nconst log = logger.getLogger($moduleName);\r\n\r\n/** Class with the implementation of a fragment object */\r\nclass Fragment {\r\n    // name to identify the fragment\r\n    #name;\r\n    // url with the content source\r\n    #source;\r\n    // name of the controller used by the fragment\r\n    #controller;\r\n    constructor(name, source, controller) {\r\n        this.#name = name;\r\n        this.#source = source;\r\n        this.#controller = controller;\r\n    }\r\n\r\n    /** Allows to obtain the name of the fragment */\r\n    get name() {\r\n        return this.#name;\r\n    }\r\n\r\n    /**\r\n     * Serves the fragment rendering its content in a specific placeholder\r\n     * @param selector String with the selector to identify the target placeholder\r\n     * @returns Promise to take actions depending on the result of the rendering\r\n     */\r\n    serve(selector) {\r\n        var oThis = this;\r\n        var target = null;\r\n        if(!selector || selector === 'body') {\r\n            target = document.body;\r\n        } else if(typeof(selector) === 'string') {\r\n            target = document.querySelector(selector);\r\n        }\r\n        if(!target) {\r\n            return Promise.reject(errorHandler.create({\r\n                module: $moduleName, \r\n                code: 'alux.fragment.serve.target_not_found[' + selector + ']'\r\n            }));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            http.request(this.#source, { method: 'GET' }).then(function(response) {\r\n                var processed = resolve(response);\r\n                if(processed) {\r\n                    target.innerHTML = processed;\r\n                } else {\r\n                    target.innerHTML = response;\r\n                }\r\n            }).catch(function(err) {\r\n                reject(errorHandler.create({\r\n                    module: $moduleName, \r\n                    code: 'alux.fragment.serve_error[' + oThis.name + ']', \r\n                    cause: err \r\n                }));\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n/** Allows to obtain a specific fragment */\r\nconst $module = function (name) {\r\n    if (typeof(name) === 'string') {\r\n        var fragment = $scope.fragments[name];\r\n        if(!fragment) {\r\n            throw new Error('alux.fragment.unknown_fragment[' + name + ']');\r\n        }\r\n        return fragment;\r\n    }\r\n};\r\n\r\n/**\r\n * Registers a new fragment\r\n * @param name Fragment name\r\n * @param source Fragment content\r\n * @param controller Optional name of the controller associated with the fragment\r\n */\r\n$module.register = function (name, source, controller) {\r\n    log.debug('Registering fragment. name=' + name);\r\n    var fragment = new Fragment(name, source, controller);\r\n    $scope.fragments[name] = fragment;\r\n    return fragment;\r\n};\r\n\r\nexport default $module;","'use strict';\r\n\r\nconst $scope = {};\r\n$scope.version = { major: 1, minor: 0, patch: 0 };\r\nconsole.log('%cAlux Framework ' + version(), 'color: #64dd17;');\r\n\r\n/**\r\n * Allows to obtain the current framework version.  If a boolean true is passed as an argument then a \r\n * canonical represenration of the version will be produced.\r\n * @returns Version number as a string or canonical (as an object)\r\n */\r\nexport function version() {\r\n    if(arguments.length === 1 && arguments[0] === true) {\r\n        return {\r\n            major: $scope.version.major,\r\n            minor: $scope.version.minor,\r\n            patch: $scope.version.patch\r\n        };\r\n    }\r\n    return 'v' + $scope.version.major + '.' + $scope.version.minor + '.' + $scope.version.patch;\r\n};\r\n\r\nimport logger from './logger.mjs';\r\nimport events from './events.mjs';\r\nimport cookies from './cookies.mjs';\r\nimport http from './http.mjs';\r\nimport fragment from './fragment.mjs';\r\n\r\n/**\r\n * Adds a function to be executed when the framework has completed the loading process\r\n * @param callback Function to be invoked once the framework is ready\r\n */\r\nexport function ready(callback) {\r\n    events.on('ready', callback);\r\n};\r\n\r\nexport { logger, events, cookies, http, fragment };"],"names":["$module","trim","text","replace","set","name","value","timespan","Error","expireDate","Date","setTime","getTime","cookie","toGMTString","document","get","cookieArray","split","idx","length","rawCookie","cookieParts","$scope","fatal","color","label","error","warn","info","debug","trace","levelCookie","cookies","log","logName","currentLevel","level","message","details","console","globalLevel","levels","Logger","this","arguments","levelInfo","_classPrivateFieldGet","getLogger","loggers","logger","_$scope$globalLevel","onDocumentReady","events","ready","completed","listeners","on","eventName","callback","eventHolder","push","map","handler","readyState","addEventListener","attachEvent","createRequest","resolve","reject","request","window","XMLHttpRequest","ActiveXObject","e","ex","createXmlHttp","onreadystatechange","status","responseText","type","code","statusText","url","options","method","Promise","open","async","data","send","random","tinyId","Math","toString","substring","shortId","guid","ErrorHandler","specs","util","cause","module","selector","target","querySelector","_typeof","body","innerHTML","create","$moduleName","Fragment","source","controller","oThis","http","_this","then","response","processed","err","errorHandler","fragment","fragments","register","version","major","minor","patch"],"mappings":"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"}